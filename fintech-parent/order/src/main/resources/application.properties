spring.application.name=order


spring.jpa.hibernate.ddl-auto=create-drop
spring.datasource.url=jdbc:mysql://localhost:3309/order?allowPublicKeyRetrieval=true&useSSL=false&useTimezone=true&serverTimezone=UTC
spring.datasource.username=order_user
spring.datasource.password=order_password
spring.jpa.show-sql: true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


camunda.client.mode=simple
camunda.client.auth.username=demo
camunda.client.auth.password=demo
camunda.client.zeebe.base-url=http://camunda-platform-zeebe-gateway:8080
camunda.client.zeebe.enabled: true
camunda.client.zeebe.gateway-url: http://camunda-platform-zeebe-gateway:26500
# base-url: http://localhost:8080
camunda.client.zeebe.prefer-rest-over-grpc: false

##observabiltity 

management.endpoints.web.exposure.include=health,env,metrics,beans,loggers
management.endpoint.health.enabled=true
management.endpoint.metrics.enabled=true
management.endpoint.beans.enabled=true
management.endpoint.loggers.enabled=true
management.endpoint.env.enabled=true

# All traces should be sent to latency analysis tool
management.tracing.sampling.probability=1.0
#management.zipkin.tracing.endpoint: http://zipkin:9411/api/v2/spans
#management.endpoints.web.exposure.include=prometheus
#tracing.url= http://jaeger:4318/v1/traces

management.otlp.tracing.endpoint=http://jaeger:4318/v1/traces



spring.kafka.bootstrap-servers=my-cluster-kafka-bootstrap:9092
spring.cloud.stream.bindings.order-flow-binding.destination=order-flow
spring.cloud.stream.bindings.order-flow-binding.content-type: application/json
spring.cloud.stream.bindings.order-flow-binding.producer.use-native-encoding=true
seNativeEncoding: true
#spring.cloud.stream.bindings.order-flow-binding.producer.header-mode: embeddedHeaders
#spring.kafka.consumer.group-id=order
#spring.kafka.consumer.key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#spring.kafka.producer.key-serializer: org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.properties.spring.json.add.type.headers=false
spring.kafka.producer.value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=OrderCreatedEvent:com.beshara.fintech.order.domain.events.OrderCreatedEvent
#spring.kafka.consumer.properties.spring.json.trusted.packages=*


